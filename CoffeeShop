import java.util.Scanner;


//Ashley Schoenradt
//Intergration Project
//Coffee ordering machine that takes orders, saves orders, and creates new drink menu options.



public class CoffeeShop {
	
	public static MenuItem[] Drinks = new MenuItem[100];
	public static Order[] Orders = new Order[100];
	public static Scanner scanner;
	public static boolean Run = true; 
	//booleans binary variables that have two possible values, usually true or false.
	public static void main(String[] args) {
		
		CreateOriginalDrinks();
		scanner = new Scanner(System.in);
		
		while(Run){
			PrintMainMenu();
			int i = scanner.nextInt();
			scanner.nextLine();
			MainMenuInput(i);
		}
		System.out.println("Goodbye!");
		System.exit(0);
		
	}
	//This is my main method, or just the main starting point of my project.
	
	public static void CreateOriginalDrinks() {
		MenuItem m = new MenuItem();
		m.DrinkName = "Coffee";
		m.Price = 2.31;
		Drinks[3] = m;	
		
		MenuItem n = new MenuItem();
		n.DrinkName = "Latte";
		n.Price = 3.15;
		Drinks[1] = n;
		
		MenuItem o = new MenuItem();
		o.DrinkName = "Iced Coffee";
		o.Price = 3.15;
		Drinks[2] = o;
	}
	//This is my coffee menu function of original drinks. I used classes and strings to create theses menu items.
	public static void PrintMainMenu() {
		System.out.println("\n\nWelcome to the Coffee Creator!\n\n");
		System.out.println("\t1.Order a drink.");
		System.out.println("\t2.Create a drink.");
		System.out.println("\t3.View Orders.");
		System.out.println("\t4.Close.\n\n");

	}
	//This is my main menu that will print first in the program. 
	public static void MainMenuInput(int i) {

				 switch (i) { 
			        case 1: 
			            OrderADrink();
			            break; 
			        case 2: 
			        	CreateMenuItemUserInput();
			            break; 
			        case 3: 
			        	DisplayAllOrders();
			            break; 
			        case 4: 
			        	quit();
			            break; 
			        default: 
			            println("Please enter a valid input.");
			            break; 
			        } 	

	}
	//I used a switch case to create user input to select an option from the main menu. 
	public static void print(String s) {
		System.out.print(s);
	}
	//idk
	public static void println(String s) {
		System.out.println(s);
	}
	//idk... i don't remember. 
	public static void OrderADrink() {
		String name = AskName();
		int drink = AskDrink();
		CreateOrder(drink, name);
	}
	//this function tells the CreateOrder function expect a String and an int from the user.
	public static void CreateMenuItemUserInput() {
		String DrinkName = DrinkName();
		double price = CustomOrderPrice();
		CreateMenuItem(DrinkName, price);
		
	}
	//This function tells the CreateMenuItem function to expect a String and a double from the user.
	public static double CustomOrderPrice() {
		System.out.println("Please provide a price.\n");
		double i = getDouble();
		return i;
	} 
	
	public static double CustomDrinkPrice() {
		System.out.println("Please select a drink.\n");
		PrintDrinkMenu();
		double i = getNumber();
		return i; 
	}
	
	public static String DrinkName() {
		System.out.println("Please provide the name of drink.");
		return scanner.nextLine();
	}
	
	public static String AskName() {
		System.out.println("Please provide a name for the order.");
		return scanner.nextLine();
	}
	
	public static int AskDrink() {
		System.out.println("Please select a drink.\n");
		PrintDrinkMenu();
		int i = getNumber();
		return i;
	}
	
	public static void CreateOrder(int i, String name) {
		Order o = new Order();
		MenuItem m = GetDrink(i);
		o.Name = name;
		o.Drink = m.DrinkName;
		o.Price = m.Price;
		CreateOrder(o);
		DisplayAllOrders();
	}
	
	public static void CreateMenuItem(String DrinkName, Double price) {
		MenuItem m = new MenuItem();
		m.DrinkName = DrinkName;
		m.Price = price;
		CreateMenuItem(m);
	}
		
	public static int getNumber() {
		int i = scanner.nextInt();
		scanner.nextLine();
		return i;
	}
	
	public static double getDouble() {
		double i = scanner.nextDouble();
		scanner.nextLine();
		return i;
	}
		
	public static MenuItem GetDrink(int x) {
		return Drinks[x];
	}
	
	public static void PrintDrinkMenu() {
		System.out.println("\n");
		for(int i = 1; i < Drinks.length-1; i++) {
			if(Drinks[i] != null) {
				System.out.println(i +". "+Drinks[i].DrinkName+"\t$"+Drinks[i].Price);
			
			}
		}
		System.out.println("\n");
		
	}

   public static void DisplayAllOrders() {
		for(int i = 1; i < Orders.length-1; i++) {
			if(Orders[i] != null) {
				System.out.println(i +". Name: "+Orders[i].Name+"\t Price: $"+Orders[i].Price + "\tDrink: "+Orders[i].Drink);
			
			}
		}
   }
	
	
	public static void CreateOrder(Order o) {
		for(int i = 1; i<Orders.length-1; i++) {
			if(Orders[i] == null) {
				Orders[i] = o;
				break;
			}
		}
	}
	
	public static void CreateMenuItem(MenuItem m) {
		for(int i = 1; i<Drinks.length-1; i++) {
			if(Drinks[i] == null) {
				Drinks[i] = m;
				break;
			}
		}
	}
	
	public static void quit() {
		Run = false;
	}
}

/* List of Data Types in Java
1. Byte- is an 8-bit complement integer. With the minimum value of -128, and the maximum value of of 127. Byte is used to save space in large arrays.
2. Short- is a 116-bit complement integer. With a minimum value of -32768, and a maximum value of 32767. Short can be used to save memory.
3. Int- is an unsigned 32-bit integer. With a minimum value of 0, and a maximum value of 2^32-1. 
4. Long- is a 64-bit complement integer. With a minimum value of -2^32 and a maximum value of 2^63-1. Use when in need of a larger range than an int.
5. Float- is a single-precision 32-bit IEEE 754 floating point. Use a float (instead of double) if you need to save memory in large arrays of floating point numbers. This data type should never be used for precise values, such as currency.
6. Double-is a double-precision 64-bit IEEE 754 floating point. For decimal values, this data type is generally the default choice. This data type should never be used for precise values, such as currency.
7. Boolean- has only two possible values: true and false. Use this data type for simple flags that track true/false conditions. 
8. Char- is a single 16-bit Unicode character. It has a minimum value of '\u0000' (or 0) and a maximum value of '\uffff' (or 65,535). */

